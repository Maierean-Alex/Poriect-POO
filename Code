#include <iostream>
#include <conio.h>
#include <string>
#include <string.h>

using namespace std;



class CreateTable
{
private:
	char test[5] = { 't','e','s','t' };
	char TableName[20], ColumnName[20], ColumnType[20], AuxCommand[100], AuxCommandCPY[100], * p;
	unsigned int  CellSize;
public:

	//Constructor Implicit
	CreateTable()
	{
		strcpy(TableName, "-");
		strcpy(ColumnName, "-");
		strcpy(ColumnType, "-");
		strcpy(AuxCommand, "-");
		strcpy(AuxCommandCPY, "-");
	}

	//Getter TableName
	char* GetterTN()
	{
		char* p = TableName;
		return p;
	}

	//Getter ColumnName
	char* GetterCN()
	{
		char* p = ColumnName;
		return p;
	}

	//Getter ColumnType
	char* GetterCT()
	{
		char* p = ColumnType;
		return p;
	}

	//Getter AuxCommand
	char* GetterAC()
	{
		char* p = AuxCommand;
		return p;
	}

	//Getter AuxCommandCPY
	char* GetterACC()
	{
		char* p = AuxCommandCPY;
		return p;
	}

	//Getter CellSize
	unsigned int GetterCS()
	{
		return CellSize;
	}

	//Setter TableName
	void SetterTN(char TableName[20])
	{
		if (strlen(TableName) != 0)
		{
			strcpy(this->TableName, TableName);
		}
		else
			cout << "\nERROR: Inavlid or Empty Value!";
	}

	//Setter ColumnName
	void SetterCN(char ColumnName[20])
	{
		if (strlen(ColumnName) != 0)
		{
			strcpy(this->ColumnName, ColumnName);
		}
		else
			cout << "\nERROR: Inavlid or Empty Value!";
	}
	
	//Setter ColumnType
	void SetterCT(char ColumnType[20])
	{
		if (strlen(ColumnType) != 0)
		{
			strcpy(this->ColumnType, ColumnType);
		}
		else
			cout << "\nERROR: Inavlid or Empty Value!";
	}

	//Setter AuxCommand
	void SetterAC(char AuxCommand[100])
	{
		if (strlen(AuxCommand) != 0)
		{
			strcpy(this->AuxCommand, AuxCommand);
		}
		else
			cout << "\nERROR: Inavlid or Empty Value!";
	}

	//Setter AuxCommandCPY
	void SetterACC(char AuxCommandCPY[100])
	{
		if (strlen(AuxCommandCPY) != 0)
		{
			strcpy(this->AuxCommandCPY, AuxCommandCPY);
		}
		else
			cout << "\nERROR: Inavlid or Empty Value!";
	}

	//Setter CellSize
	void SetterCS(unsigned int  CellSize)
	{
		if (CellSize != 0)
			this->CellSize = CellSize;
		else
			cout << "\nERROR: Inavlid or Empty Value!";
	}

	//Constructor cu Parametru
	CreateTable(char command[100])
	{
		TNFct(command);
		CNFct();
		CTFct();
		CSFct();
	}

	// Constructor Copiere
	CreateTable(const CreateTable& obj) 
	{
		if (p != nullptr)
		{
			delete[] p;
		}
		strcpy(this->TableName,obj.TableName);
		strcpy(this->ColumnName, obj.ColumnName);
		strcpy(this->ColumnType, obj.ColumnType);
		strcpy(this->AuxCommand, obj.AuxCommand);
		strcpy(this->AuxCommandCPY, obj.AuxCommandCPY);
		this->p = obj.p;
		this->CellSize = obj.CellSize;
	}

	//Overloading = operator
	CreateTable& operator=(CreateTable& obj)
	{
		if (p != nullptr)
		{
			delete[] p;
		}
		this->p = obj.p;
		strcpy(this->TableName, obj.TableName);
		strcpy(this->ColumnName, obj.ColumnName);
		strcpy(this->ColumnType, obj.ColumnType);
		strcpy(this->AuxCommand, obj.AuxCommand);
		strcpy(this->AuxCommandCPY, obj.AuxCommandCPY);
		return *this;
	}

	//Overloading + operator
	CreateTable operator+(CreateTable obj)
	{
		CreateTable copy;
		strcat(copy.TableName, obj.TableName);
		strcat(copy.ColumnName, obj.ColumnName);
		strcat(copy.ColumnType, obj.ColumnType);
		strcat(copy.AuxCommand, obj.AuxCommand);
		strcat(copy.AuxCommandCPY, obj.AuxCommandCPY);
		copy.CellSize = copy.CellSize + obj.CellSize;
		return copy;
	}

	//TableName function
	void TNFct(char command[100]) 
	{
		strcpy(AuxCommand, command);
		strcpy(AuxCommand, AuxCommand + (strlen("CREATE TABLE ")));
		p = strtok(AuxCommand, "(");
		strcpy(TableName, p);
		cout << endl << "Table Name: " << TableName << endl;
		strcpy(AuxCommand, command);
		strcpy(AuxCommand, AuxCommand + (strlen(TableName)) + (strlen("CREATE TABLE ")) + 1);
		//cout << endl << "Command after: " << AuxCommand << endl;
	}

	//ColumnName function
	void CNFct() 
	{
		strcpy(AuxCommandCPY, AuxCommand);
		p = strtok(AuxCommand, " ");
		strcpy(ColumnName, p);
		cout << endl << "Column Name: " << ColumnName << endl;
		strcpy(AuxCommand, AuxCommandCPY);
		strcpy(AuxCommand, AuxCommand + (strlen(ColumnName) + 1));
		//cout << endl << "Command after: " << AuxCommand << endl;
	}

	//ColumnType Function
	void CTFct()
	{
		strcpy(AuxCommandCPY, AuxCommand);
		//p = strtok(AuxCommand, "(");
		strcpy(ColumnType, strtok(AuxCommand, "("));
		cout << endl << "Column Type: " << ColumnType << endl;
		strcpy(AuxCommand, AuxCommandCPY);
		strcpy(AuxCommand, AuxCommand + (strlen(ColumnType) + 1));
		//cout << endl << "Command after: " << AuxCommand << endl;
	}

	//Cell Size function
	void CSFct() 
	{
		strcpy(AuxCommandCPY, AuxCommand);
		p = strtok(AuxCommand, ")");
		//cout << endl << "p: " << p << endl;
		CellSize = stoi(p);
		cout << endl << "Cell Size: " << CellSize << endl;
		strcpy(AuxCommand, AuxCommandCPY);
		strcpy(AuxCommand, AuxCommand + (strlen(AuxCommand)));
		//cout << endl << "Command after: " << AuxCommand << endl;
	}

	//Deconstructor
	~CreateTable()
	{
		if (p != nullptr)
		{
			delete[] p;
		}
	}
};

//Overloading << operator
ostream& operator<<(ostream& out, CreateTable& obj)
{
	out << "Table Name: " << obj.GetterTN() << endl;
	out << "Column Name: " << obj.GetterCN() << endl;
	out << "Column Type: " << obj.GetterCT() << endl;
	out << "AuxCommand: " << obj.GetterAC() << endl;
	out << "AuxCommandCPY: " << obj.GetterACC() << endl;
	out << "CellSize: " << obj.GetterCS() << endl;
	return out;
}

//Overloading >> operator
istream& operator>>(istream& in, CreateTable& obj)
{
	char insert[50];
	unsigned int insert2;
	cout << "Table Name: ";
	in >> insert;
	obj.SetterTN(insert);
	cout << "Column Name: ";
	in >> insert;
	obj.SetterCN(insert);
	cout << "Column Type: ";
	in >> insert;
	obj.SetterCT(insert);
	cout << "AuxCommand: ";
	in >> insert;
	obj.SetterAC(insert);
	cout << "AuxCommandCPY: ";
	in >> insert;
	obj.SetterACC(insert);
	cout << "Cell Size: ";
	in >> insert2;
	obj.SetterCS(insert2);
	return in;
}

class DropTable
{
private:
	char TableName[20];
	char AuxCommand[100], AuxCommandCPY[100], * p;
public:

	DropTable(char command[100])
	{
		TNFct(command);
	}

	char* GetterTB()
	{
		char* p = TableName;
		return p;
	}

	char* GetterAC()
	{
		char* p = AuxCommand;
		return p;
	}

	char* GetterACC()
	{
		char* p = AuxCommandCPY;
		return p;
	}

	void TNFct(char command[100]) //TableName function
	{
		strcpy(AuxCommand, command);
		strcpy(AuxCommand, AuxCommand + (strlen("DROP TABLE ")));
		p = strtok(AuxCommand, ";");
		strcpy(TableName, p);
		cout << endl << "Table Name: " << TableName << endl;
		strcpy(AuxCommand, command);
		strcpy(AuxCommand, AuxCommand + strlen(AuxCommand));
		//cout << endl << "Command after: " << AuxCommand << endl;
	}
};

class DisplayTable
{
private:
	char TableName[20];
	char AuxCommand[100], AuxCommandCPY[100], * p;
public:
	DisplayTable(char command[100])
	{
		TNFct(command);
	}

	char* GetterTB()
	{
		char* p = TableName;
		return p;
	}

	char* GetterAC()
	{
		char* p = AuxCommand;
		return p;
	}

	char* GetterACC()
	{
		char* p = AuxCommandCPY;
		return p;
	}

	void TNFct(char command[100]) //TableName function
	{
		strcpy(AuxCommand, command);
		strcpy(AuxCommand, AuxCommand + (strlen("DISPLAY TABLE ")));
		p = strtok(AuxCommand, ";");
		strcpy(TableName, p);
		cout << endl << "Table Name: " << TableName << endl;
		strcpy(AuxCommand, command);
		strcpy(AuxCommand, AuxCommand + strlen(AuxCommand));
		//cout << endl << "Command after: " << AuxCommand << endl;
	}
};

class CreateIndex
{
private:
	char TableName[20];
	char IndexName[20];
	char ColumnName[20];
	char* ColumnNames[20];
	char AuxCommand[100], AuxCommandCPY[100], * p;
	bool ok_ON;
public:
	CreateIndex(char command[100])
	{
		ok_ON = 1;
		INFct(command);
		ONCheck();
		if (ok_ON == 0)
			return;
		TNFct();
		ColumnsFct();
	}

	char* GetterTB()
	{
		char* p = TableName;
		return p;
	}

	char* GetterCN()
	{
		char* p = ColumnName;
		return p;
	}

	char* GetterIN()
	{
		char* p = IndexName;
		return p;
	}


	char* GetterAC()
	{
		char* p = AuxCommand;
		return p;
	}

	char* GetterACC()
	{
		char* p = AuxCommandCPY;
		return p;
	}

	void INFct(char command[100]) //IndexName function
	{
		strcpy(AuxCommand, command);
		strcpy(AuxCommand, AuxCommand + (strlen("CREATE INDEX ")));
		p = strtok(AuxCommand, " ");
		strcpy(IndexName, p);
		cout << endl << "Index Name: " << IndexName << endl;
		strcpy(AuxCommand, command);
		strcpy(AuxCommand, AuxCommand + (strlen(IndexName)) + (strlen("CREATE INDEX ")) + 1);
		//cout << endl << "Command after: " << AuxCommand << endl;
	}

	void ONCheck()
	{
		strcpy(AuxCommandCPY, AuxCommand);
		if (strcmp("ON", strtok(AuxCommand, " ")) == 0)
		{
			strcpy(AuxCommand, AuxCommandCPY);
			strcpy(AuxCommand, AuxCommand + (strlen("ON ")));
		}
		else
		{
			cout << "ERROR: Missing 'ON' statement!";
			ok_ON = 0;
			return;
		}
	}

	void TNFct() //TableName function
	{
		strcpy(AuxCommandCPY, AuxCommand);
		p = strtok(AuxCommand, "(");
		strcpy(TableName, p);
		cout << endl << "Table Name: " << TableName << endl;
		strcpy(AuxCommand, AuxCommandCPY);
		strcpy(AuxCommand, AuxCommand + strlen(TableName));
		//cout << endl << "Command after: " << AuxCommand << endl;
	}
	void ColumnsFct() //Determine in which columns the index will be created
	{
		strcpy(AuxCommand, AuxCommand + 1);
		if (strchr(AuxCommand, ',') != nullptr)
		{
			int i = 0;
			strcpy(AuxCommandCPY, AuxCommand);
			while ((strchr(AuxCommand, ',') != nullptr) && (i<20))
			{
				ColumnNames[i] = new char[20];
				p = strtok(AuxCommand, ",");
				strcpy(ColumnNames[i], p);
				cout << endl << "Column Nr " << i <<" Name: " << ColumnNames[i] << endl;
				strcpy(AuxCommand, AuxCommandCPY);
				strcpy(AuxCommand, AuxCommand + strlen(ColumnNames[i])+1);
				//cout << endl << "Command after: " << AuxCommand << endl;
				i++;
				strcpy(AuxCommandCPY, AuxCommand);
				
			}
				strcpy(AuxCommandCPY, AuxCommand);
				ColumnNames[i] = new char[20];
				p = strtok(AuxCommand, ")");
				strcpy(ColumnNames[i],p);
				cout << endl << "Column Nr " << i <<" Name: "<< ColumnNames[i] << endl;
				strcpy(AuxCommand, AuxCommandCPY);
				strcpy(AuxCommand, AuxCommand + strlen(AuxCommand));
				//cout << endl << "Command after: " << AuxCommand << endl;
				i++;
		}
		else
		{
			strcpy(AuxCommandCPY, AuxCommand);
			strcpy(ColumnName, strtok(AuxCommand, ")"));
			cout << endl << "Column Name: " << ColumnName << endl;
			strcpy(AuxCommand, AuxCommandCPY);
			strcpy(AuxCommand, AuxCommand + strlen(AuxCommand));
			//cout << endl << "Command after: " << AuxCommand << endl;
		}
	}
};

class DropIndex
{
private:
	char IndexName[20];
	char AuxCommand[100], AuxCommandCPY[100], * p;
public:

	DropIndex(char command[100])
	{
		INFct(command);
	}

	char* GetterIN()
	{
		char* p = IndexName;
		return p;
	}

	char* GetterAC()
	{
		char* p = AuxCommand;
		return p;
	}

	char* GetterACC()
	{
		char* p = AuxCommandCPY;
		return p;
	}


	void INFct(char command[100]) //IndexName function
	{
		strcpy(AuxCommand, command);
		strcpy(AuxCommand, AuxCommand + (strlen("DROP INDEX ")));
		p = strtok(AuxCommand, " ");
		strcpy(IndexName, p);
		cout << endl << "Index Name: " << IndexName << endl;
		strcpy(AuxCommand, command);
		strcpy(AuxCommand, AuxCommand + (strlen(IndexName)) + (strlen("DROP INDEX ")) + 1);
		cout << endl << "Command after: " << AuxCommand << endl;
	}
};

class Select
{
private:
	char TableName[20];
	char* ColumnNames[20];
	char ColumnName[200];
	char AuxCommand[100], AuxCommandCPY[100], *p;
public:
	
	Select(char command[100])
	{
		strcpy(AuxCommand, command);
		strcpy(AuxCommand, AuxCommand + strlen("SELECT "));
		//cout << endl << "Command after: " << AuxCommand << endl;
		if (strncmp("ALL FROM ", AuxCommand, strlen("ALL FROM ")) == 0)
			ACNsFct();
		else if (strchr(AuxCommand, ',') != nullptr)
			CNsFct();
		else if (strchr(AuxCommand, ',') == nullptr)
			CNFct();	
	}

	char* GetterCN()
	{
		char* p = ColumnName;
		return p;
	}

	char* GetterAC()
	{
		char* p = AuxCommand;
		return p;
	}

	char* GetterACC()
	{
		char* p = AuxCommandCPY;
		return p;
	}

	void CNsFct() //Multiple Column Names Function
	{
		int i = 0;
		strcpy(AuxCommandCPY, AuxCommand);
		while ((strchr(AuxCommand, ',') != nullptr) && (i < 20))
		{
			ColumnNames[i] = new char[20];
			p = strtok(AuxCommand, ",");
			strcpy(ColumnNames[i], p);
			cout << endl << "Selected Column Nr " << i << " Name: " << ColumnNames[i] << endl;
			strcpy(AuxCommand, AuxCommandCPY);
			strcpy(AuxCommand, AuxCommand + strlen(ColumnNames[i]) + 1);
			//cout << endl << "Command after: " << AuxCommand << endl;
			i++;
			strcpy(AuxCommandCPY, AuxCommand);
		}
		strcpy(AuxCommandCPY, AuxCommand);
		ColumnNames[i] = new char[20];
		p = strtok(AuxCommand, ";");
		strcpy(ColumnNames[i],p);
		cout << endl << "Selected Column Nr " << i << " Name: " << ColumnNames[i] << endl;
		strcpy(AuxCommand, AuxCommandCPY);
		strcpy(AuxCommand, AuxCommand + strlen(AuxCommand));
		//cout << endl << "Command after: " << AuxCommand << endl;
		i++;
	}

	void CNFct() //Single Column Name Function
	{
		strcpy(AuxCommandCPY, AuxCommand);
		p = strtok(AuxCommand, ";");
		strcpy(ColumnName, p);
		cout << endl << "Selected Column Name: " << ColumnName << endl;
		strcpy(AuxCommand, AuxCommandCPY);
		strcpy(AuxCommand, AuxCommand + (strlen(ColumnName) + 1));
		//cout << endl << "Command after: " << AuxCommand << endl;
	}

	void ACNsFct() //From which table we need to extract the column names
	{
		strcpy(AuxCommandCPY, AuxCommand);
		strcpy(AuxCommand, AuxCommand + strlen("ALL FROM "));
		p = strtok(AuxCommand, ";");
		strcpy(TableName, p);
		cout << endl << "Selected all Columns from Table Named: " << TableName << endl;
		strcpy(AuxCommand, AuxCommandCPY);
		strcpy(AuxCommand, AuxCommand + (strlen(TableName) + 1));
		//cout << endl << "Command after: " << AuxCommand << endl;
	}
};

class InsertInto
{
private:

	char AuxCommand[100], AuxCommandCPY[100], * p;
public:

	InsertInto(char command[100])
	{
		cout << endl << "We're sorry but the INSERT INTO command has not yet been implemented.\nWe apologize for the inconvenience\n";
	}

};



class CommandMain
{
private:
	bool ok = 0;
public:

	int ReadCommand(char command[100])
	{
		
		if (strcmp(";", command + strlen(command)-1) == 0)
		{
			if (strncmp("CREATE TABLE", command, strlen("CREATE TABLE")) == 0)
		{
			CreateTable create(command);
			ok = 1;
		}
		else if (strncmp("DROP TABLE", command, strlen("DROP TABLE")) == 0)
		{
			DropTable drop(command);
			ok = 1;
		}
		else if (strncmp("DISPLAY TABLE", command, strlen("DISPLAY TABLE")) == 0)
		{
			DisplayTable display(command);
			ok = 1;
		}
		else if (strncmp("CREATE INDEX", command, strlen("CREATE INDEX")) == 0)
		{
			CreateIndex createIndex(command);
			ok = 1;
		}
		else if (strncmp("DROP INDEX", command, strlen("DROP INDEX")) == 0)
		{
			DropIndex dropIndex(command);
			ok = 1;
		}
		else if (strncmp("INSERT INTO", command, strlen("INSERT INTO")) == 0)
		{
			InsertInto insertInto(command);
			ok = 1;
		}
		else if (strncmp("SELECT", command, strlen("SELECT")) == 0)
		{
			Select select(command);
			ok = 1;
		}
		else
			ok = 0;

		if (ok == 0)
			return 0;
		else if (ok == 1)
			return 1;	
		}

		else
		{
			cout << endl << "ERROR: Command Missing a ;" << endl;
			return 0;	
		}
	}
};




int main()
{
	char UserCommand[100];
	char* test=nullptr;
	CommandMain obj;
	bool ok = 0;


	cout << "Welcome to The Big Boi Database\nPlease follow the instructions and write all commands in uppercase\n\n";
	
	cout << "\nTo see what 'TEST' commands are available, enter 'HELP'\nEnter command or 'EXIT' to close program: ";

	while (true) {
		cin.get(UserCommand, 100);
		cin.get();
		if (strcmp("EXIT", UserCommand) == 0)
		{
			break;
		}
		else if (strncmp("HELP", UserCommand, 4) == 0)
		{
			cout << "\nAvailable 'TEST' Commands: \n";
			cout << "'TEST <<' - Tests overloaded out operator\n";
			cout << "'TEST >>' - Tests overloaded in operator\n";
			cout << "\nEnter command: ";
		}
		else if (strncmp("TEST <<", UserCommand, 7) == 0)
		{
			CreateTable tester;
			//test = tester.GetterTN();
			//char c[50];
			//strcpy(c, test);
			//cout << endl << test << endl;
			cout << tester << endl;;
			break;
		}
		else if (strncmp("TEST >>", UserCommand, 7) == 0)
		{
			CreateTable tester;
			cin >> tester;
			cout << endl;
			break;
		}
		else if (strncmp("TEST", UserCommand, 4) == 0)
		{
			cout << "\nERROR: Test command missing specification. Please use 'HELP' to see what 'TEST' commands are available.\n";
			cout << "\nEnter command: ";
		}
		else
		{
			ok = obj.ReadCommand(UserCommand);
			if (ok == 0)
			{
				cout << "\nIncorrect command, try again: ";
			}
			else if (ok == 1)
			{
				cout << "\nEnter command: ";
			}
		}
	}

	return 0;
}
